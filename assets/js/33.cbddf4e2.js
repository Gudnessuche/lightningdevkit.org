(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{347:function(t,e,n){"use strict";n.r(e);var a=n(6),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"key-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key-management"}},[t._v("#")]),t._v(" Key Management")]),t._v(" "),e("p",[t._v("Relevant reference: "),e("a",{attrs:{href:"https://docs.rs/lightning/*/lightning/chain/keysinterface/struct.KeysManager.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust docs"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("LDK Private Key Information is primarily provided through the "),e("code",[t._v("chain::keysinterface::KeysInterface")]),t._v(" trait. It includes a few basic methods to get public and private key information, as well as a method to get an instance of a second trait which provides per-channel information - "),e("code",[t._v("chain::keysinterface::ChannelKeys")]),t._v(". While a custom "),e("code",[t._v("KeysInterface")]),t._v(" implementation allows simple flexibility to control derivation of private keys, "),e("code",[t._v("ChannelKeys")]),t._v(" focuses on signing Lightning transactions and is primarily useful if you want to store private key material on a separate device which enforces Lightning protocol details.")]),t._v(" "),e("p",[t._v("A simple implementation of "),e("code",[t._v("KeysInterface")]),t._v(" is provided in the form of "),e("code",[t._v("chain::keysinterface::KeysManager")]),t._v(", see its documentation for more details on its key derivation. It uses "),e("code",[t._v("chain::keysinterface::InMemoryChannelKeys")]),t._v(" for channel signing, which is likely an appropriate signer for custom "),e("code",[t._v("KeysInterface")]),t._v(" implementations as well.")]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("KeysManager")]),t._v(" can be constructed simply with only a 32-byte seed and some integers which ensure uniqueness across restarts (defined as "),e("code",[t._v("starting_time_secs")]),t._v(" and "),e("code",[t._v("starting_time_nanos")]),t._v(").")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" random_32_bytes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fill in random_32_bytes with secure random data, or, on restart, reload the seed from disk.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" start_time "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("duration_since")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNIX_EPOCH")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" keys_interface_impl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("lightning"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("chain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("keysinterface"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeysManager")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("random_32_bytes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("as_secs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start_time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("subsec_nanos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h1",{attrs:{id:"spending-on-chain-funds"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spending-on-chain-funds"}},[t._v("#")]),t._v(" Spending On-Chain Funds")]),t._v(" "),e("p",[t._v("When a channel has been closed and some outputs on chain are spendable only by us, LDK provides a "),e("code",[t._v("util::events::Event::SpendableOutputs")]),t._v(" event in return from "),e("code",[t._v("ChannelMonitor::get_and_clear_pending_events()")]),t._v(". It contains a list of "),e("code",[t._v("chain::keysinterface::SpendableOutputDescriptor")]),t._v(" objects which describe the output and provide all necessary information to spend it.")]),t._v(" "),e("p",[t._v("If you're using "),e("code",[t._v("KeysManager")]),t._v(" directly, a utility method is provided which can generate a signed transaction given a list of "),e("code",[t._v("SpendableOutputDescriptor")]),t._v(" objects. "),e("code",[t._v("KeysManager::spend_spendable_outputs")]),t._v(" can be called any time after receiving the "),e("code",[t._v("SpendableOutputDescriptor")]),t._v(" objects to build a spending transaction, including delaying until sending funds to an external destination or opening a new channel. Note that if you open new channels directly with "),e("code",[t._v("SpendableOutputDescriptor")]),t._v(" objects, you must ensure all closing/destination scripts provided to LDK are SegWit (either native or P2SH-wrapped).")]),t._v(" "),e("p",[t._v("If you are not using "),e("code",[t._v("KeysManager")]),t._v(" for keys generation, you must re-derive the private keys yourself. Any "),e("code",[t._v("BaseSign")]),t._v(" object must provide a unique id via the "),e("code",[t._v("channel_keys_id")]),t._v(" function, whose value is provided back to you in the "),e("code",[t._v("SpendableOutputs")]),t._v(" objects. A "),e("code",[t._v("SpendableOutputDescriptor::StaticOutput")]),t._v(" element does not have this information as the output is sent to an output which used only "),e("code",[t._v("KeysInterface")]),t._v(" data, not per-channel data.")])])}),[],!1,null,null,null);e.default=s.exports}}]);