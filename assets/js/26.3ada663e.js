(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{337:function(e,t,a){"use strict";a.r(t);var s=a(6),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"intro"},[a("h2",[e._v("Why LDK?")]),e._v(" "),a("p",[e._v("Easily integrate Lightning features into any Bitcoin wallet")])]),e._v(" "),a("div",{staticClass:"features"},[a("div",{staticClass:"feature"},[a("h3",[e._v("Multi-Language Support")]),e._v(" "),a("p",[e._v("We support native API's including Rust, C, Swift, Java & Kotlin so you can build Lightning applications in your preferred programming language.")])]),e._v(" "),a("div",{staticClass:"feature"},[a("h3",[e._v("Custom Persistent Storage")]),e._v(" "),a("p",[e._v("Our API's let you choose how to backup channel state. This gives you multi-wallet device access and lets you save state locally, to the cloud or an alternative backup scheme.")])]),e._v(" "),a("div",{staticClass:"feature"},[a("h3",[e._v("Custom Block Data Sources")]),e._v(" "),a("p",[e._v("Use a local full node, an SPV node, or your own Electrum server with API access to source data about the blockchain  and feed it to LDK for decision-making about whether to sign a state update.")])]),e._v(" "),a("div",{staticClass:"feature"},[a("h3",[e._v("Single Wallet")]),e._v(" "),a("p",[e._v("No need to create separate Bitcoin & Lightning wallets, forcing users to backup an additional recovery phrase. Instead, we let you define your own wallet and create one unified experience.")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);