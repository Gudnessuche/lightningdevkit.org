(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{329:function(e,t,n){"use strict";n.r(t);var o=n(6),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"chain-activity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#chain-activity"}},[e._v("#")]),e._v(" Chain Activity")]),e._v(" "),n("p",[e._v("Initially, our node doesn't have any channels and hence has no data to monitor\nfor on-chain. When a channel is opened with a peer, the "),n("code",[e._v("ChannelManager")]),e._v(" creates\na "),n("code",[e._v("ChannelMonitor")]),e._v(" and passes it to the "),n("code",[e._v("ChainMonitor")]),e._v(" to watch.")]),e._v(" "),n("p",[e._v("At this point, you need to feed LDK any chain data of interest so that it can\nrespond accordingly. It supports receiving either full blocks or pre-filtered\nblocks using the "),n("code",[e._v("chain::Listen")]),e._v(" interface. While block data can sourced from\nanywhere, it is your responsibility to call the "),n("code",[e._v("block_connected")]),e._v(" and\n"),n("code",[e._v("block_disconnected")]),e._v(" methods on "),n("code",[e._v("ChannelManager")]),e._v(" and "),n("code",[e._v("ChainMonitor")]),e._v(". This allows\nthem to update channel state and respond to on-chain events, respectively.")]),e._v(" "),n("p",[e._v("LDK comes with a "),n("code",[e._v("lightning-block-sync")]),e._v(" utility that handles polling a block\nsource for the best chain tip, detecting chain forks, and notifying listeners\nwhen blocks are connected and disconnected. It can be configured to:")]),e._v(" "),n("ul",[n("li",[e._v("Poll a custom "),n("code",[e._v("BlockSource")])]),e._v(" "),n("li",[e._v("Notify "),n("code",[e._v("ChannelManager")]),e._v(" and "),n("code",[e._v("ChainMonitor")]),e._v(" of block events")])]),e._v(" "),n("p",[e._v("It is your choice as to whether you use this utility or your own to feed the\nrequired chain data to LDK. If you choose to use it, you will need to implement\nthe "),n("code",[e._v("BlockSource")]),e._v(" interface or use one of the samples that it provides.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),n("p",[e._v("Currently, "),n("code",[e._v("lightning-block-sync")]),e._v(" is only available in Rust.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);